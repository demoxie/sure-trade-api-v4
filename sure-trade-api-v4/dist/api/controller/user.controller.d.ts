import { UserService } from "../service/user.service";
import { BecomeMerchantRequestDTO, LoginDto, PasswordResetDTO, ProfilePictureUpdateDTO, RegisterTelegramDTO, SignupDTO, TransactionPinDTO, UpdateDTO, VerifyOtpDTO } from "../dto";
import { Request } from "express";
import { AuthService } from "../../auth/service/auth.service";
import { GiftCardTransactionService } from "../../gift-card/gift-card-trsanction/gift-card-transaction.service";
import { GiftCardRateService } from "../../gift-card/gift-card-rate/gift-card-rate.service";
export declare class UserController {
    private readonly userService;
    private readonly authService;
    private readonly transactionService;
    private readonly giftCardRateService;
    constructor(userService: UserService, authService: AuthService, transactionService: GiftCardTransactionService, giftCardRateService: GiftCardRateService);
    static getJwtUser: (req: Request) => JwtPayload;
    getAllUsers(): Promise<any>;
    getUserById(id: number): Promise<any>;
    getLoggedInUserProfile(request: Request): Promise<any>;
    forgotPassword(email: string, req: Request): Promise<UserResponse>;
    resetPassword(otp: string, body: PasswordResetDTO): Promise<UserResponse>;
    getMerchants(): Promise<any>;
    getMerchantsByRate(cardName: string, currency: string, transactionType: string, giftCardCurrency: string): Promise<any>;
    getMerchantRates(merchantId: number): Promise<any>;
    getActiveMerchants(): Promise<any>;
    createUser(body: SignupDTO): Promise<User>;
    setupTransactionPin(body: TransactionPinDTO, req: Request): Promise<UserResponse>;
    confirmTransactionPin(pin: string, req: Request): Promise<UserResponse>;
    updateUser(id: number, body: UpdateDTO): Promise<any>;
    deleteUser(id: number): Promise<string>;
    login(body: LoginDto, req: Request): Promise<any>;
    logout(req: Request): Promise<string>;
    verifyOtp(body: VerifyOtpDTO): Promise<OtpVerificationResponse>;
    uploadProfileImage(body: ProfilePictureUpdateDTO, req: Request): Promise<UserResponse>;
    requestToBecomeMerchant(body: BecomeMerchantRequestDTO, req: Request): Promise<any>;
    getAdminAddressToPay(): Promise<any>;
    registerTelegram(body: RegisterTelegramDTO): Promise<string>;
}
