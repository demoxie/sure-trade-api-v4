"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RedisCoreModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisCoreModule = void 0;
const common_1 = require("@nestjs/common");
const redis_client_1 = require("./redis.client");
const redis_constants_1 = require("./redis.constants");
let RedisCoreModule = RedisCoreModule_1 = class RedisCoreModule {
    static forRoot(options) {
        const redisClient = {
            provide: redis_constants_1.REDIS_TOKEN,
            useValue: (0, redis_client_1.createRedisClient)(options),
        };
        return {
            exports: [redisClient],
            module: RedisCoreModule_1,
            providers: [redisClient],
        };
    }
    static forRootAsync(asyncOptions) {
        const redisClient = {
            inject: [redis_constants_1.REDIS_OPTIONS],
            provide: redis_constants_1.REDIS_TOKEN,
            useFactory: (options) => (0, redis_client_1.createRedisClient)(options),
        };
        return {
            exports: [redisClient],
            imports: asyncOptions.imports,
            module: RedisCoreModule_1,
            providers: [...this.createAsyncProviders(asyncOptions), redisClient],
        };
    }
    static createAsyncProviders(options) {
        if (options.useExisting || options.useFactory) {
            return [this.createAsyncOptionsProvider(options)];
        }
        return [
            this.createAsyncOptionsProvider(options),
            {
                provide: options.useClass,
                useClass: options.useClass,
            },
        ];
    }
    static createAsyncOptionsProvider(options) {
        if (options.useFactory) {
            return {
                inject: options.inject || [],
                provide: redis_constants_1.REDIS_OPTIONS,
                useFactory: options.useFactory,
            };
        }
        return {
            inject: [options.useExisting || options.useClass],
            provide: redis_constants_1.REDIS_OPTIONS,
            useFactory: (optionsFactory) => optionsFactory.createRedisOptions(),
        };
    }
};
RedisCoreModule = RedisCoreModule_1 = __decorate([
    (0, common_1.Global)(),
    (0, common_1.Module)({})
], RedisCoreModule);
exports.RedisCoreModule = RedisCoreModule;
